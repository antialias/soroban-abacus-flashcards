import { NextRequest, NextResponse } from 'next/server'
import { spawn } from 'child_process'
import path from 'path'

// Initialize generator with correct absolute path to packages/core
const corePackagePath = path.resolve(process.cwd(), '../../packages/core')

// Function to call Python bridge directly for SVG generation
async function generateSVGFromPython(config: any): Promise<string> {
  return new Promise((resolve, reject) => {
    const pythonProcess = spawn('python3', [path.join(corePackagePath, 'src/bridge.py')], {
      cwd: corePackagePath,
      stdio: ['pipe', 'pipe', 'pipe']
    })

    let stdout = ''
    let stderr = ''

    pythonProcess.stdout.on('data', (data) => {
      stdout += data.toString()
    })

    pythonProcess.stderr.on('data', (data) => {
      stderr += data.toString()
    })

    pythonProcess.on('close', (code) => {
      if (code !== 0) {
        reject(new Error(`Python process failed with code ${code}: ${stderr}`))
        return
      }

      try {
        const result = JSON.parse(stdout.trim())
        if (result.error) {
          reject(new Error(result.error))
        } else {
          resolve(result.pdf) // This contains the SVG content when format=svg
        }
      } catch (error) {
        reject(new Error(`Failed to parse Python output: ${error}`))
      }
    })

    pythonProcess.on('error', (error) => {
      reject(new Error(`Failed to start Python process: ${error}`))
    })

    // Send config to Python bridge
    pythonProcess.stdin.write(JSON.stringify(config) + '\n')
    pythonProcess.stdin.end()
  })
}

export async function POST(request: NextRequest) {
  try {
    const config = await request.json()

    // Debug: log the received config
    console.log('🔍 Preview config:', JSON.stringify(config, null, 2))

    // Ensure range is set with a default
    if (!config.range) {
      config.range = '0-9'
    }

    // For preview, limit to a few numbers and use SVG format for fast rendering
    const previewConfig = {
      ...config,
      range: getPreviewRange(config.range),
      format: 'svg', // Use SVG format for preview
      cardsPerPage: 6 // Standard card layout
    }

    console.log('🔍 Processed preview config:', JSON.stringify(previewConfig, null, 2))

    // Generate real SVG preview using single-card mode for consistency
    console.log('🚀 Generating single-card soroban SVG preview via SorobanGenerator bridge')

    try {
      // Parse the numbers from the range for individual cards
      const numbers = parseNumbersFromRange(getPreviewRange(config.range))
      console.log('🔍 Generating individual SVGs for numbers:', numbers)

      // Generate individual SVGs for each number using single-card mode
      const samples = []
      for (const number of numbers) {
        try {
          const singleCardConfig = {
            mode: 'single-card',
            number: number,
            format: 'svg',
            beadShape: previewConfig.beadShape || 'diamond',
            colorScheme: previewConfig.colorScheme || 'place-value',
            hideInactiveBeads: previewConfig.hideInactiveBeads || false,
            scaleFactor: 4.0 // Larger scale for preview visibility
          }
          console.log(`🔍 Generating single-card SVG for number ${number}`)
          const svgContent = await generateSVGFromPython(singleCardConfig)
          console.log(`✅ Generated single-card SVG for ${number}, length: ${svgContent.length}`)
          samples.push({
            number,
            front: svgContent,
            back: number.toString()
          })
        } catch (error) {
          console.error(`❌ Failed to generate SVG for number ${number}:`, error instanceof Error ? error.message : error)
          samples.push({
            number,
            front: generateMockSorobanSVG(number),
            back: number.toString()
          })
        }
      }

      return NextResponse.json({
        count: numbers.length,
        samples,
        note: 'Real individual SVGs generated by SorobanGenerator bridge'
      })

    } catch (error) {
      console.error('⚠️ Real SVG generation failed, using fallback preview:', error instanceof Error ? error.message : error)
      return NextResponse.json(getMockPreviewData(config))
    }

  } catch (error) {
    console.error('❌ Preview generation failed:', error)

    // Always fall back to mock data for preview
    const config = await request.json().catch(() => ({ range: '0-9' }))
    return NextResponse.json(getMockPreviewData(config))
  }
}

// Helper function to parse numbers from range string
function parseNumbersFromRange(range: string): number[] {
  if (!range) return [0, 1, 2]

  if (range.includes('-')) {
    const [start] = range.split('-')
    const startNum = parseInt(start) || 0
    return [startNum, startNum + 1, startNum + 2]
  }

  if (range.includes(',')) {
    return range.split(',').slice(0, 3).map(n => parseInt(n.trim()) || 0)
  }

  const num = parseInt(range) || 0
  return [num, num + 1, num + 2]
}

// Helper function to limit range for preview
function getPreviewRange(range: string): string {
  if (!range) return '0,1,2'

  if (range.includes('-')) {
    const [start] = range.split('-')
    const startNum = parseInt(start) || 0
    return `${startNum},${startNum + 1},${startNum + 2}`
  }

  if (range.includes(',')) {
    const numbers = range.split(',').slice(0, 3)
    return numbers.join(',')
  }

  return range
}

// Mock preview data for development and fallback
function getMockPreviewData(config: any) {
  const range = config.range || '0-9'
  let numbers: number[]

  if (range.includes('-')) {
    const [start] = range.split('-')
    const startNum = parseInt(start) || 0
    numbers = [startNum, startNum + 1, startNum + 2]
  } else if (range.includes(',')) {
    numbers = range.split(',').slice(0, 3).map((n: string) => parseInt(n.trim()) || 0)
  } else {
    const num = parseInt(range) || 0
    numbers = [num, num + 1, num + 2]
  }

  return {
    count: numbers.length,
    samples: numbers.map(number => ({
      number,
      front: generateMockSorobanSVG(number),
      back: number.toString()
    }))
  }
}

// Generate a simple mock soroban SVG for preview
function generateMockSorobanSVG(number: number): string {
  const width = 200
  const height = 300
  const rodWidth = 4
  const beadRadius = 8
  const heavenBeadHeight = 40
  const earthBeadHeight = 40
  const rods = 3 // Show 3 rods for preview

  let svg = `<svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">`

  // Frame
  svg += `<rect x="10" y="10" width="${width-20}" height="${height-20}" fill="none" stroke="#8B4513" stroke-width="3"/>`

  // Crossbar (divider between heaven and earth)
  const crossbarY = height / 2
  svg += `<line x1="15" y1="${crossbarY}" x2="${width-15}" y2="${crossbarY}" stroke="#8B4513" stroke-width="3"/>`

  // Generate rods and beads based on the number
  const digits = number.toString().padStart(rods, '0').split('').map(d => parseInt(d))

  for (let i = 0; i < rods; i++) {
    const rodX = 40 + i * 50
    const digit = digits[rods - 1 - i] // Rightmost digit first

    // Rod
    svg += `<line x1="${rodX}" y1="20" x2="${rodX}" y2="${height-20}" stroke="#654321" stroke-width="${rodWidth}"/>`

    // Calculate bead positions for this digit
    const heavenValue = digit >= 5 ? 1 : 0
    const earthValue = digit % 5

    // Heaven bead (worth 5)
    const heavenY = heavenValue > 0 ? crossbarY - 15 : 30
    const heavenColor = heavenValue > 0 ? '#FF6B6B' : '#DDD'
    svg += `<circle cx="${rodX}" cy="${heavenY}" r="${beadRadius}" fill="${heavenColor}" stroke="#333" stroke-width="1"/>`

    // Earth beads (worth 1 each)
    for (let j = 0; j < 4; j++) {
      const isActive = j < earthValue
      const earthY = crossbarY + 20 + j * 25
      const earthColor = isActive ? '#4ECDC4' : '#DDD'
      svg += `<circle cx="${rodX}" cy="${earthY}" r="${beadRadius}" fill="${earthColor}" stroke="#333" stroke-width="1"/>`
    }
  }

  svg += '</svg>'
  return svg
}

// Health check endpoint
export async function GET() {
  return NextResponse.json({
    status: 'healthy',
    endpoint: 'preview',
    message: 'Preview API is running'
  })
}